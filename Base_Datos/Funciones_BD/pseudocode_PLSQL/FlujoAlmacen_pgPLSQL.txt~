Content-Type: text/enriched
Text-Width: 70

CREATE OR REPLACE FUNCTION entrada_movimientoalmacen(id_documento int)
RETURNS void AS $$


DECLARE
	id_clavefolio int;
	id_usuario int;
	id_ubicacionfisica int;
	id_sucursal int;
	AlmacenEstatus varchar(1);
	array_docid int[];
	array_docid_index int;
	id_docalm int;
	id_detalledocumento int;	


	id_registromaestro int;
	--id_personafiscal int;
	--id_ubicacionfisica int;	
	id_presentacion int;
	cantidad numeric;
	costopreciounitario numeric;
	costopreciototal numeric;


	fecha_hora timestamp;
	existencias numeric;


BEGIN
-- 1. Se consulta del documento dado como parametro el Concepto y el Movimiento - Id_Concepto, Id_Movimiento(Entrada)
    EXECUTE 'SELECT "Id_ClaveFolio", "Id_Usuario", "Id_UbicacionFisica1" FROM "Documento" WHERE "ID" =' || id_documento INTO id_clavefolio, id_usuario, id_ubicacionfisica;
    -- 2. Del documento origen, tomando como base la informacion de Id_ClaveFolio, extrae Id_Sucursal
    EXECUTE 'SELECT "Id_Sucursal" FROM "Numeracion_Folio" WHERE "Id_ClaveFolio" = ' || id_clavefolio INTO id_sucursal;
    -- 3. Con la informacion de Id_UbicacionFisica, se consulta el estatus del almacen, si se encuentra cerrado se cancela la operacion y se notifica el mensaje de error en donde no es posible hacer la entrada debido a que el almacen se encuentra cerrado.
    EXECUTE 'SELECT "Estatus" FROM "Ubicacion_Fisica" WHERE "ID" = ' || id_ubicacionfisica INTO AlmacenEstatus;

    

    -- Excepcion si se encuentra cerrado
    IF AlmacenEstatus = 'C' THEN
       RAISE EXCEPTION 'DB_ERROR_02 -- > %', AlmacenEstatus;
    ELSE
    -- Se continua si no lo esta y continua el proceso
    	array_docid := array(EXECUTE 'SELECT "ID" FROM "Detalle_Documento" WHERE "Id_Documento" = ' || id_documento || ')';


	-- Se asume que el documento siempre contendra un detalle dado que sera creado por la aplicacion
	FOR array_docid_index IN 1..coalesce(array_length(array_docid, 1), 0) LOOP
	  -- Se crea el documento de almacen tomando como base el documento que invoco este procedimiento
	  -- Actualmente la funcion crear documento setea el id_documentoorigen a 0. Cambiar esto
          EXECUTE 'SELECT crear_documento('||id_sucursal||',''Flujo_Almacen'','||id_usuario||', '||id_documento||')' INTO id_docalm;


	  -- Consulta la informacion del documento origen a fin de insertar el nuevo registro
	  EXECUTE 'SELECT "Detalle_Documento"."Id_RegistroMaestro", "Detalle_Documento"."Id_UbicacionFisica1", "ExtraDetalle_Documento"."Id_Presentacion", "ExtraDetalle_Documento"."Cantidad", "ExtraDetalle_Documento"."CostoPrecioUnitario", "ExtraDetalle_Documento"."CostoPrecioTotal" FROM "Detalle_Documento" INNER JOIN "ExtraDetalle_Documento" ON "Detalle_Documento"."ID"="ExtraDetalle_Documento"."Id_DetalleDocumento" WHERE "Detalle_Documento"."ID"='|| array_docid[array_docid_index] INTO id_registromaestro, id_ubicacionfisica, id_presentacion, cantidad, costopreciounitario, costopreciototal;


          --  Inserta un registro en la tabla Detalle_Documento 
	  EXECUTE 'INSERT INTO "Detalle_Documento"("Id_Documento", "Id_RegistroMaestro", "Id_UbicacionFisica1", "Subtotal") VALUES ('|| id_docalm ||' ,'|| id_registromaestro ||', '|| id_ubicacionfisica ||', '|| costopreciototal ||' )';
	  -- Selecciona el registro de Detalle_Documento recientemente insertado
	  EXECUTE 'SELECT currval(pg_get_serial_sequence(''Detalle_Documento'',''ID''))' INTO id_detalledocumento;
	  --  Inserta un registro en la tabla ExtraDetalle_Documento
          EXECUTE 'SELECT LOCALTIMESTAMP' INTO fecha_hora;
	  EXECUTE 'INSERT INTO "ExtraDetalle_Documento"("Id_DetalleDocumento", "Id_Presentacion", "Cantidad", "SaldoCierre", "CostoPrecioUnitario", "CostoPrecioTotal", "FechaHoraApertura") VALUES ('|| id_detalledocumento ||' ,'|| id_presentacion ||', '|| cantidad ||, '|| cantidad ||', '|| costounitario ||','|| costopreciototal ||','|| fecha_hora ||')';

	  

	  -- Actualiza las existencias del registro maestro para la ubicacion agregando la cantidad a ingresar
	  EXECUTE 'SELECT "Existencias" FROM "RegMaestro_Ubicacion" WHERE "Id_RegistroMaestro" = '||id_registromaestro||', "Id_UbicacionFisica"= ' ||id_ubicacionfisica INTO existencias;
	  EXECUTE 'UPDATE "RegMaestro_Ubicacion" SET "Existencias" = ' ||existencias + cantidad||' WHERE "Id_RegistroMaestro" = '||id_registromaestro||' AND "Id_UbicacionFisica"= ' ||id_ubicacionfisica;


          -- De una vez actualizar el monto del documento de almacen con el monto del documento origen
          EXECUTE 'UPDATE "Documento" SET "Monto" = ' || costopreciototal ||' WHERE "ID=" '|| id_docalm
	  EXECUTE 'SELECT aplicar_asiento(id_docalm)';
	  EXECUTE 'SELECT cerrar_documento(id_docalm)';
	END LOOP;


      END IF;
END;
$$ LANGUAGE PLPGSQL;
/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*
CREATE OR REPLACE FUNCTION getval_idextra_saldocierre(int, int) 
RETURNS NUMERIC AS $$
 BEGIN
  IF $2 = 1 THEN  
    SELECT "ExtraDetalle_Documento"."SaldoCierre" FROM "idextra_saldocierre" WHERE "Posicion" = $1;
  ELSIF $2 = 2 THEN
    SELECT "ExtraDetalle_Documento"."CostoPrecioUnitario" FROM "idextra_saldocierre" WHERE "Posicion" = $1;
  ELSIF $2 = 3 THEN
    SELECT "ExtraDetalle_Documento"."ID" FROM "idextra_saldocierre" WHERE "Posicion" = $1;
  END IF;
 END;
$$ LANGUAGE PLPGSQL;
/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*
CREATE OR REPLACE FUNCTION get_costopromedio(id_registromaestro int, id_ubicacionfisica int)
RETURNS NUMERIC AS $$


 DECLARE
	existencias numeric;
	costo_total numeric;
 BEGIN
	EXECUTE 'SELECT "Existencias" FROM "RegMaestro_UbicacionFisica" WHERE "Id_RegistroMaestro"= '||id_registromaestro||' AND "Id_UbicacionFisica"= '||id_ubicacionfisica INTO existencias;


	EXECUTE 'SELECT SUM("ExtraDetalle_Documento"."CostoPrecioTotal") FROM "Detalle_Documento" INNER JOIN "ExtraDetalle_Documento" ON "Detalle_Documento"."ID"="ExtraDetalle_Documento"."Id_DetalleDocumento" WHERE "Detalle_Documento"."Id_RegistroMaestro"='|| id_registromaestro ||', "Detalle_Documento"."Id_UbicacionFisica1"='||id_ubicacionfisica||' AND "ExtraDetalle_Documento"."SaldoCierre" > 0' INTO costo_total;

	

	RETURN (costo_total / existencias);


 END;
$$ LANGUAGE PLPGSQL;


/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*


CREATE OR REPLACE FUNCTION salida_movimientoalmacen(id_documento int, metodovaluacion int)
RETURNS void AS $$


DECLARE
	--id concepto int;
	id_movimiento int;
	id_clavefolio int;
	id_usuario int;
	id_ubicacionfisica int;
	id_ubicacionfisica2 int;
	id_sucursal int;
	AlmacenEstatus varchar(1);


	array_docid int[];
	array_docid_index int;


	id_registromaestro int;
	--id_personafiscal int;
	id_ubicacionfisica int;	
	id_presentacion int;
	cantidad numeric;


	resultado_compara boolean;
	cantidad_retirar numeric;
	sql_detalle_salida text;


	index_temp int;


	id_docalm int;
	id_detalledocumento int;

	

	fecha_hora timestamp;


	costo_salida numeric;	


	costopreciounitario numeric;
	costopreciototal numeric;


	existencias numeric;


BEGIN
    -- 1. Se consulta del documento dado como parametro el Concepto y el Movimiento - Id_Concepto, Id_Movimiento(Entrada)
    EXECUTE 'SELECT "Id_DocumentoMovimiento", "Id_ClaveFolio", "Id_Usuario", "Id_UbicacionFisica1", "Id_UbicacionFisica2" FROM "Documento" WHERE "ID" =' || id_documento INTO id_movimiento, id_clavefolio, id_usuario, id_ubicacionfisica, id_ubicacionfisica2;
    -- 2. Del documento origen, tomando como base la informacion de Id_ClaveFolio, extrae Id_Sucursal
    EXECUTE 'SELECT "Id_Sucursal" FROM "Numeracion_Folio" WHERE "Id_ClaveFolio" = ' || id_clavefolio INTO id_sucursal;


    -- Se cambia la ubicacion fisica para el caso de que se trate de un traspaso 
    IF Id_Movimiento = 3 THEN
       id_ubicacionfisica := id_ubicacionfisica2;
    END IF;


    -- 3. Con la informacion de Id_UbicacionFisica, se consulta el estatus del almacen, si se encuentra cerrado se cancela la operacion y se notifica el mensaje de error en donde no es posible hacer la entrada debido a que el almacen se encuentra cerrado.
    EXECUTE 'SELECT "Estatus" FROM "Ubicacion_Fisica" WHERE "ID" = ' || id_ubicacionfisica INTO AlmacenEstatus;

    

    -- Excepcion si se encuentra cerrado
    IF AlmacenEstatus = 'C' THEN
       RAISE EXCEPTION 'DB_ERROR_02 --> %', AlmacenEstatus;
    ELSE
    -- Se continua si no lo esta y continua el proceso buscando los detalles del documento recibido en la funcion
    	array_docid := array(EXECUTE 'SELECT "ID" FROM "Detalle_Documento" WHERE "Id_Documento" = ' || id_documento || ')';


	-- Se asume que el documento siempre contendra un detalle dado que sera creado por la aplicacion
	FOR array_docid_index IN 1..coalesce(array_length(array_docid, 1), 0) LOOP


	  -- Consulta la informacion del documento origen a fin de determinar la cantidad que sale del almacen y generar el documento de salida
	  EXECUTE 'SELECT "Detalle_Documento"."Id_RegistroMaestro", "Detalle_Documento"."Id_UbicacionFisica1", "ExtraDetalle_Documento"."Id_Presentacion", "ExtraDetalle_Documento"."Cantidad" FROM "Detalle_Documento" INNER JOIN "ExtraDetalle_Documento" ON "Detalle_Documento"."ID"="ExtraDetalle_Documento"."Id_DetalleDocumento" WHERE "Detalle_Documento"."ID"='|| array_docid[array_docid_index] INTO id_registromaestro, id_ubicacionfisica, id_presentacion, cantidad;
	  cantidad_retirar := cantidad;
	  EXECUTE 'SELECT comparar_existenciasalmacen('||id_registromaestro||', '||id_ubicacionfisica||', '||cantidad_retirar||')' INTO resultado_compara;
	  IF resultado_compara = 'F' THEN
	   -- No existen suficientes existencias en el almacen para cubrir la cantidad solicitada
	   RAISE EXCEPTION 'DB_ERROR_04 --> %', resultado_compara;
	  ELSE
	   sql_detalle_salida := 'CREATE TEMP TABLE idextra_saldocierre ON COMMIT DROP AS SELECT row_number(ORDER BY "ExtraDetalle_Documento"."FechaHoraApertura"';


	   IF metodovaluacion = 2 THEN -- LIFO, agregar el ordenamiento descendente
	    sql_detalle_salida := sql_detalle_salida || 'DESC';
	   END IF;


	   sql_detalle_salida := sql_detalle_salida || ') AS "Posicion", "ExtraDetalle_Documento"."ID", "ExtraDetalle_Documento"."SaldoCierre", "ExtraDetalle_Documento"."FechaHoraApertura", "ExtraDetalle_Documento"."CostoPrecioUnitario" FROM "ExtraDetalle_Documento" INNER JOIN "Detalle_Documento" ON "ExtraDetalle_Documento"."Id_DetalleDocumento" = "Detalle_Documento"."ID" WHERE "Detalle_Documento"."Id_RegistroMaestro" = '|| id_registromaestro ||' AND "Detalle_Documento"."UbicacionFisica1" = ' || id_ubicacionfisica || ' AND "ExtraDetalle_Documento"."SaldoCierre" > 0 ORDER BY "ExtraDetalle_Documento"."FechaHoraApertura" ';


   	   IF metodovaluacion = 2 THEN -- LIFO, agregar el ordenamiento descendente
	    sql_detalle_salida := sql_detalle_salida || 'DESC';
	   END IF;

		     		 

	   EXECUTE sql_detalle_salida;


 	   index_temp := 1;
	   WHILE (cantidad_retirar > 0)
	   LOOP
 	     EXECUTE 'SELECT crear_documento(id_sucursal,''Flujo_Almacen'',id_usuario,id_documento)' INTO id_docalm;
  	     -- Considerar para creacion de documento, que este herede el concepto y el movimiento de su documento padre
	     --  Inserta un registro en la tabla Detalle_Documento 
    	     EXECUTE 'INSERT INTO "Detalle_Documento"("Id_Documento", "Id_RegistroMaestro", "Id_UbicacionFisica1") VALUES ('|| id_docalm ||' ,'|| id_registromaestro ||', '|| id_ubicacionfisica ||')';
	     -- Selecciona el registro de Detalle_Documento recientemente insertado
	     EXECUTE 'SELECT currval(pg_get_serial_sequence(''Detalle_Documento'',''ID''))' INTO id_detalledocumento;
	     --  Inserta un registro en la tabla ExtraDetalle_Documento
             EXECUTE 'SELECT LOCALTIMESTAMP' INTO fecha_hora;


	     IF metodovaluacion <<> 3 THEN 
	     	costo_salida := SELECT getval_idextra_saldocierre(index_temp, 2);
	     ELSE
	        costo_salida := SELECT get_costopromedio(id_registromaestro, id_ubicacionfisica);
	     END IF;


	     EXECUTE 'INSERT INTO "ExtraDetalle_Documento"("Id_DetalleDocumento", "Id_Presentacion", "Cantidad", "CostoPrecioUnitario", "CostoPrecioTotal", "FechaHoraApertura") VALUES ('|| id_detalledocumento ||' ,'|| id_presentacion ||', '|| cantidad_retirar ||', '|| costo_salida ||','|| cantidad_retirar * costo_salida ||')';


	     IF cantidad_retirar <<= getval_idextra_saldocierre(index_temp, 1) THEN
	      -- Actualiza en el registro de la tabla ExtraDetalle_Documento para el registro de la salida
	      EXECUTE 'UPDATE "ExtraDetalle_Documento" SET "SaldoCierre" = '||getval_idextra_saldocierre(index_temp, 1) - cantidad_retirar||' WHERE "ID" ='||getval_idextra_saldocierre(index_temp, 3);
  	     ELSIF cantidad_retirar > getval_idextra_saldocierre(index_temp, 1) THEN
	      -- Actualiza en el registro de la tabla ExtraDetalle_Documento para el registro de la salida
	      EXECUTE 'UPDATE "ExtraDetalle_Documento" SET "SaldoCierre" = 0 WHERE "ID" ='||getval_idextra_saldocierre(index_temp, 3);
	     END IF;


  	     -- Actualizar en el Detalle_Documento origen. Subtotal - Costo precio total
	     EXECUTE 'UPDATE "Detalle_Documento" SET "Subtotal" = ' || cantidad_retirar * costo_salida ||' WHERE "ID" ='||array_docid[array_docid_index];
	     -- Actualiza las existencias del registro maestro para la ubicacion agregando la cantidad a sacar
	     EXECUTE 'SELECT "Existencias" FROM "RegMaestro_Ubicacion" WHERE "Id_RegistroMaestro" = '||id_registromaestro||', "Id_UbicacionFisica"= ' ||id_ubicacionfisica INTO existencias;
	     EXECUTE 'UPDATE "RegMaestro_Ubicacion" SET "Existencias" = ' ||existencias - cantidad_retirar||' WHERE "Id_RegistroMaestro" = '||id_registromaestro||' AND "Id_UbicacionFisica"= ' ||id_ubicacionfisica;
	     -- Actualizar en Documento
	     EXECUTE 'UPDATE "Documento" SET "Monto" = '|| cantidad_retirar * costo_salida||' WHERE "ID" = '|| id_docalm;		       


     	     IF cantidad_retirar <<= getval_idextra_saldocierre(index_temp, 1) THEN
	      cantidad_retirar := 0
  	     ELSIF cantidad_retirar > getval_idextra_saldocierre(index_temp, 1) THEN
	      cantidad_retirar := cantidad_retirar - getval_idextra_saldocierre(index_temp, 1);
	     END IF;


  	     EXECUTE 'SELECT aplicar_asiento(id_docalm)';
	     EXECUTE 'SELECT cerrar_documento(id_docalm)';


 	     index_temp := index_temp + 1;
	   END LOOP;
	  END IF;
	END LOOP;
    END IF;
END;
$$ LANGUAGE PLPGSQL;


/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*
CREATE OR REPLACE FUNCTION comparar_existenciasalmacen(id_registromaestro int, id_ubicacionfisica int, cantidad numeric)
RETURNS boolean AS $$


DECLARE
	Saldocierre numeric;


BEGIN
	EXECUTE 'SELECT SUM("ExtraDetalle_Documento"."SaldoCierre") FROM "Detalle_Documento" INNER JOIN "ExtraDetalle_Documento" ON "Detalle_Documento"."ID"="ExtraDetalle_Documento"."Id_DetalleDocumento" WHERE "Detalle_Documento"."Id_RegistroMaestro"='|| id_registromaestro ||', "Detalle_Documento"."Id_UbicacionFisica1"='||id_ubicacionfisica||' AND "ExtraDetalle_Documento"."SaldoCierre" > 0' INTO Saldocierre;

	

	IF Saldocierre >= cantidad THEN
	   RETURN TRUE;
	ELSE	
	   RETURN FALSE;
	END IF;
END;
$$ LANGUAGE PLPGSQL;
/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*
CREATE OR REPLACE FUNCTION aplicar_movimientoalmacen(id_documento int)
RETURNS integer AS $$


DECLARE
	id_movimiento int;


BEGIN
-- 1. Se consulta del documento dado como parametro el  Movimiento - Id_Movimiento
    EXECUTE 'SELECT "Id_DocumentoMovimiento" FROM "Documento" WHERE "ID" =' || id_documento INTO id_movimiento;


    IF id_movimiento = 1 THEN -- Entrada
       EXECUTE 'SELECT entrada_movimientoalmacen(id_documento)';
    ELSIF id_movimiento = 2 THEN -- Salida
       EXECUTE 'SELECT salida_movimientoalmacen(id_documento)';
    ELSIF id_movimiento = 3 THEN -- Traspaso
       EXECUTE 'SELECT entrada_movimientoalmacen(id_documento)';
       EXECUTE 'SELECT salida_movimientoalmacen(id_documento)';
    END IF;


    RETURN id_movimiento;
END;
$$ LANGUAGE PLPGSQL;
/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*	  



